#!/usr/bin/python3
'''
TMUX Status
===========


This is a small script which changes the TMUX status-line depending on the fact
that we are online or offline. The status-line format is defined (and
hardcoded) in the script itself. So it will replace your own status-line if you
decide to use it. Maybe, if I feel like it I will make this more configurable.

It mainly exists on github to keep track of my changes, and to provide it to
anyone who may find this useful as well.

All numeric color codes in this file use the 256-color codes for terminals. See
https://gist.github.com/mgedmin/2762225
'''

from argparse import ArgumentParser
from collections import namedtuple
from subprocess import call as call_, PIPE
from time import sleep
import logging
import sys

Color = namedtuple('Color', 'foreground background')
Theme = namedtuple('Theme', 'default session accent highlight')
StatusLine = namedtuple('StatusLine', 'left right main current')

LOG = logging.getLogger(__name__)
COLORS = {
    'online': Theme(
        default=Color(154, 22),
        session=Color(0, 184),
        accent=Color(120, 58),
        highlight=Color(0, 2),
    ),
    'offline': Theme(
        default=Color(226, 52),
        session=Color(0, 172),
        accent=Color(196, 88),
        highlight=Color(16, 196),
    )
}


def call(cmd, *args, **kwargs):
    LOG.debug("Calling '%s'", ' '.join(cmd))
    return call_(cmd, *args, **kwargs)


def parse_args():
    parser = ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true', default=False,
                        help='Print some debug output')
    return parser.parse_args()


def colored(text: str, color: Color, reverse: bool = False) -> str:
    '''
    Return *text* surrended by tmux color markup.

    If *reverse* is true, foreground and background is flipped.
    '''
    fg, bg = color
    if reverse:
        fg, bg = bg, fg
    return '#[fg=colour%d]#[bg=colour%d]%s#[default]' % (fg, bg, text)


def transition_symbol(text: str, start_color: int, end_color: int) -> str:
    '''
    Runs :py:func:`.colored` with two custom color values for fore- and
    background. This is sometimes needed for special characters which can be
    used as "transition" symbols to transition from one color to the next.

    How this is used depends largely on the symbol used, so it is necessary to
    specify colors manually.
    '''
    return colored(text, Color(start_color, end_color))


def we_are_online() -> bool:
    '''
    Runs a check which should return True when internet is available, False
    otherwise.
    '''
    ping_status = call(['ping', '-c', '1', '-W', '1', '8.8.8.8'],
                       stdout=PIPE, stderr=PIPE)
    return ping_status == 0


def get_status_items(theme: Theme) -> StatusLine:
    '''
    Prepares and returns a status-line according to a theme.
    '''
    return StatusLine(
        left=[
            colored(' #S ', theme.session),
            transition_symbol('', theme.session.background, theme.default.background),
            ' ',
        ],
        right=[
            transition_symbol('', theme.session.background, theme.default.background),
            colored(' #(date +"%d. %b %Y  %H:%M")', theme.session),
            colored('  ', theme.session),
            colored('#{host_short}', theme.session),
        ],
        main=[
            transition_symbol('', theme.default.background, theme.accent.background),
            colored(' #W ', theme.accent),
            transition_symbol('', theme.accent.background, theme.default.background),
        ],
        current=[
            transition_symbol("", theme.default.background, theme.highlight.background),
            colored(" #W ", theme.highlight),
            transition_symbol("", theme.highlight.background, theme.default.background),
        ]
    )


def set_satus_line(items: StatusLine) -> None:
    '''
    Sets the status-line in tmux
    '''
    call(['tmux', 'set-option', '-g', 'status-left', ''.join(items.left)])
    call(['tmux', 'set-option', '-g', 'status-right', ''.join(items.right)])
    call(['tmux', 'set-option', '-g', 'window-status-format', ''.join(items.main)])
    call(['tmux', 'set-option', '-g', 'window-status-current-format', ''.join(items.current)])


def enable_logging():
    logging.basicConfig(level=logging.DEBUG)


def main() -> None:
    '''
    The main entry-point
    '''

    args = parse_args()
    if args.debug:
        enable_logging()

    last_theme = None
    print('tmux online monitor running...')
    while True:
        theme_name = 'online' if we_are_online() else 'offline'
        theme = COLORS[theme_name]

        if theme != last_theme:
            LOG.info('Switching to %s', theme_name)
            # Set the default status-line color
            call(['tmux', 'set-option', 'status-bg', 'colour%d' % theme.default.background])
            call(['tmux', 'set-option', 'status-fg', 'colour%d' % theme.default.foreground])

            # Set the Theme
            items = get_status_items(theme)
            set_satus_line(items)
            last_theme = theme
        sleep(1)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(0)
